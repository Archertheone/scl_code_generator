TEST_CASE "FB_BottleProcessing"

PROPERTY
AUTHOR : ""
VERSION : "0.1"
COMMENT : ""
SCOPE : "PLC_3"
PLCSIM_INSTANCE_NAME : "FB_BottleProcessing"
TEST_EXECUTION_MODE : "SystemManagedPlcSimAdvInstance"
END_PROPERTY

VAR
bottleSensor:"FB_BottleProcessing_DB".bottleSensor;
cleaningConfirmButton:"FB_BottleProcessing_DB".cleaningConfirmButton;
fillingConfirmButton:"FB_BottleProcessing_DB".fillingConfirmButton;
cappingConfirmButton:"FB_BottleProcessing_DB".cappingConfirmButton;
packingConfirmButton:"FB_BottleProcessing_DB".packingConfirmButton;
finishedButton:"FB_BottleProcessing_DB".finishedButton;
Pump_Motor:"FB_BottleProcessing_DB".Pump_Motor;
Filling_Valve:"FB_BottleProcessing_DB".Filling_Valve;
Capping_Machine:"FB_BottleProcessing_DB".Capping_Machine;
Packing_Machine:"FB_BottleProcessing_DB".Packing_Machine;
Completion_Light:"FB_BottleProcessing_DB".Completion_Light;

END_VAR

STEP: "Step 1"
bottleSensor:=1;
RUN(CYCLES:=1);
//ASSERT.Equal(bottleSensor,1);
//ASSERT.Equal(cleaningConfirmButton,0);
//ASSERT.Equal(fillingConfirmButton,0);
//ASSERT.Equal(cappingConfirmButton,0);
//ASSERT.Equal(packingConfirmButton,0);
//ASSERT.Equal(finishedButton,0);

ASSERT.Equal(Pump_Motor,1);
ASSERT.Equal(Filling_Valve,0);
ASSERT.Equal(Capping_Machine,0);
ASSERT.Equal(Packing_Machine,0);
ASSERT.Equal(Completion_Light,0);

END_STEP

STEP: "Step 2"
cleaningConfirmButton:=1;
RUN(CYCLES:=1);
//ASSERT.Equal(bottleSensor,1);
//ASSERT.Equal(cleaningConfirmButton,0);
//ASSERT.Equal(fillingConfirmButton,0);
//ASSERT.Equal(cappingConfirmButton,0);
//ASSERT.Equal(packingConfirmButton,0);
//ASSERT.Equal(finishedButton,0);

ASSERT.Equal(Pump_Motor,0);
ASSERT.Equal(Filling_Valve,1);
ASSERT.Equal(Capping_Machine,0);
ASSERT.Equal(Packing_Machine,0);
ASSERT.Equal(Completion_Light,0);

END_STEP

STEP: "Step 3"
fillingConfirmButton:=1;
RUN(CYCLES:=1);
//ASSERT.Equal(bottleSensor,1);
//ASSERT.Equal(cleaningConfirmButton,0);
//ASSERT.Equal(fillingConfirmButton,0);
//ASSERT.Equal(cappingConfirmButton,0);
//ASSERT.Equal(packingConfirmButton,0);
//ASSERT.Equal(finishedButton,0);

ASSERT.Equal(Pump_Motor,0);
ASSERT.Equal(Filling_Valve,0);
ASSERT.Equal(Capping_Machine,1);
ASSERT.Equal(Packing_Machine,0);
ASSERT.Equal(Completion_Light,0);

END_STEP

STEP: "Step 4"
cappingConfirmButton:=1;
RUN(CYCLES:=1);
//ASSERT.Equal(bottleSensor,1);
//ASSERT.Equal(cleaningConfirmButton,0);
//ASSERT.Equal(fillingConfirmButton,0);
//ASSERT.Equal(cappingConfirmButton,0);
//ASSERT.Equal(packingConfirmButton,0);
//ASSERT.Equal(finishedButton,0);

ASSERT.Equal(Pump_Motor,0);
ASSERT.Equal(Filling_Valve,0);
ASSERT.Equal(Capping_Machine,0);
ASSERT.Equal(Packing_Machine,1);
ASSERT.Equal(Completion_Light,0);

END_STEP

STEP: "Step 5"
packingConfirmButton:=1;
RUN(CYCLES:=1);
//ASSERT.Equal(bottleSensor,1);
//ASSERT.Equal(cleaningConfirmButton,0);
//ASSERT.Equal(fillingConfirmButton,0);
//ASSERT.Equal(cappingConfirmButton,0);
//ASSERT.Equal(packingConfirmButton,0);
//ASSERT.Equal(finishedButton,0);

ASSERT.Equal(Pump_Motor,0);
ASSERT.Equal(Filling_Valve,0);
ASSERT.Equal(Capping_Machine,0);
ASSERT.Equal(Packing_Machine,0);
ASSERT.Equal(Completion_Light,1);

END_STEP

STEP: "Step 6"
finishedButton:=1;
RUN(CYCLES:=1);
//ASSERT.Equal(bottleSensor,1);
//ASSERT.Equal(cleaningConfirmButton,0);
//ASSERT.Equal(fillingConfirmButton,0);
//ASSERT.Equal(cappingConfirmButton,0);
//ASSERT.Equal(packingConfirmButton,0);
//ASSERT.Equal(finishedButton,0);

ASSERT.Equal(Pump_Motor,0);
ASSERT.Equal(Filling_Valve,0);
ASSERT.Equal(Capping_Machine,0);
ASSERT.Equal(Packing_Machine,0);
ASSERT.Equal(Completion_Light,0);

END_STEP



END_TEST_CASE

TEST_CASE "FB_CalculateDayOfYear"

PROPERTY
AUTHOR : ""
VERSION : "0.1"
COMMENT : ""
SCOPE : "PLC_3"
PLCSIM_INSTANCE_NAME : "FB_CalculateDayOfYear"
TEST_EXECUTION_MODE : "SystemManagedPlcSimAdvInstance"
END_PROPERTY

VAR
Year:"FB_CalculateDayOfYear_DB".Year;
Month:"FB_CalculateDayOfYear_DB".Month;
Day:"FB_CalculateDayOfYear_DB".Day;
DayOfYear:"FB_CalculateDayOfYear_DB".DayOfYear;
error:"FB_CalculateDayOfYear_DB".error;
status:"FB_CalculateDayOfYear_DB".status;
END_VAR

STEP: "Step 1"
Year:=1000;
Month:=1;
Day:=1;

RUN(CYCLES:=1);
ASSERT.Equal(DayOfYear,1);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);
END_STEP

STEP: "Step 2"
Year:=3000;
Month:=12;
Day:=31;

RUN(CYCLES:=1);
ASSERT.Equal(DayOfYear,365);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);
END_STEP

STEP: "Step 3"
Year:=2024;
Month:=7;
Day:=18;

RUN(CYCLES:=1);
ASSERT.Equal(DayOfYear,200);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);
END_STEP

STEP: "Step 4"
Year:=2023;
Month:=7;
Day:=18;

RUN(CYCLES:=1);
ASSERT.Equal(DayOfYear,199);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);
END_STEP

STEP: "Step 5"
Year:=3001;
Month:=7;
Day:=18;

RUN(CYCLES:=1);
//ASSERT.Equal(DayOfYear,0);
ASSERT.Equal(error,TRUE);
ASSERT.Equal(status,16#8001);
END_STEP

STEP: "Step 6"
Year:=2023;
Month:=13;
Day:=18;

RUN(CYCLES:=1);
//ASSERT.Equal(DayOfYear,0);
ASSERT.Equal(error,TRUE);
ASSERT.Equal(status,16#8002);
END_STEP

STEP: "Step 7"
Year:=2023;
Month:=7;
Day:=32;

RUN(CYCLES:=1);
//ASSERT.Equal(DayOfYear,0);
ASSERT.Equal(error,TRUE);
ASSERT.Equal(status,16#8003);
END_STEP

STEP: "Step 8"
Year:=999;
Month:=7;
Day:=18;

RUN(CYCLES:=1);
ASSERT.Equal(error,TRUE);
ASSERT.Equal(status,16#8001);
END_STEP

STEP: "Step 9"
Year:=2023;
Month:=0;
Day:=18;

RUN(CYCLES:=1);
ASSERT.Equal(error,TRUE);
ASSERT.Equal(status,16#8002);
END_STEP

STEP: "Step 10"
Year:=2023;
Month:=2;
Day:=29;

RUN(CYCLES:=1);
ASSERT.Equal(error,TRUE);
ASSERT.Equal(status,16#8003);
END_STEP

STEP: "Step 11"
Year:=500;
Month:=15;
Day:=188;

RUN(CYCLES:=1);
ASSERT.Equal(error,TRUE);
ASSERT.Equal(status,16#8001);
END_STEP

STEP: "Step 12"
Year:=1000;
Month:=-1;
Day:=188;

RUN(CYCLES:=1);
ASSERT.Equal(error,TRUE);
ASSERT.Equal(status,16#8002);
END_STEP



END_TEST_CASE

TEST_CASE "FB_ColorLightControl"

PROPERTY
AUTHOR : ""
VERSION : "0.1"
COMMENT : ""
SCOPE : "PLC_3"
PLCSIM_INSTANCE_NAME : "FB_ColorLightControl"
TEST_EXECUTION_MODE : "SystemManagedPlcSimAdvInstance"
END_PROPERTY

VAR
controlButton:"FB_ColorLightControl_DB".controlButton;
greenLight:"FB_ColorLightControl_DB".greenLight;
redLight:"FB_ColorLightControl_DB".redLight;
yellowLight:"FB_ColorLightControl_DB".yellowLight;
END_VAR




STEP: "Step 1"
controlButton:=1;

RUN(CYCLES:=1);
ASSERT.Equal(greenLight,1);
ASSERT.Equal(redLight,0);
ASSERT.Equal(yellowLight,0);
END_STEP

STEP: "Step 1+"
controlButton:=0;
RUN(CYCLES:=1);
END_STEP

STEP: "Step 2"

controlButton:=1;

RUN(CYCLES:=1);
ASSERT.Equal(greenLight,0);
ASSERT.Equal(redLight,1);
ASSERT.Equal(yellowLight,0);
END_STEP

STEP: "Step 3"
controlButton:=0;

RUN(CYCLES:=1);
ASSERT.Equal(greenLight,0);
ASSERT.Equal(redLight,1);
ASSERT.Equal(yellowLight,0);
END_STEP

STEP: "Step 4"
controlButton:=1;

RUN(CYCLES:=1);
ASSERT.Equal(greenLight,0);
ASSERT.Equal(redLight,0);
ASSERT.Equal(yellowLight,1);
END_STEP

STEP: "Step 4+"
controlButton:=0;
RUN(CYCLES:=1);
END_STEP

STEP: "Step 5"
controlButton:=1;

RUN(CYCLES:=1);
ASSERT.Equal(greenLight,1);
ASSERT.Equal(redLight,1);
ASSERT.Equal(yellowLight,1);
END_STEP

STEP: "Step 5+"
controlButton:=0;
RUN(CYCLES:=1);
END_STEP

STEP: "Step 6"
controlButton:=1;

RUN(CYCLES:=1);
ASSERT.Equal(greenLight,0);
ASSERT.Equal(redLight,0);
ASSERT.Equal(yellowLight,0);
END_STEP

STEP: "Step 6+"
controlButton:=0;
RUN(CYCLES:=1);
END_STEP

STEP: "Step 7"
controlButton:=1;

RUN(CYCLES:=1);
ASSERT.Equal(greenLight,1);
ASSERT.Equal(redLight,0);
ASSERT.Equal(yellowLight,0);
END_STEP

STEP: "Step 7+"
controlButton:=0;
RUN(CYCLES:=1);
END_STEP

STEP: "Step 8"
controlButton:=1;

RUN(CYCLES:=1);
ASSERT.Equal(greenLight,0);
ASSERT.Equal(redLight,1);
ASSERT.Equal(yellowLight,0);
END_STEP




END_TEST_CASE

TEST_CASE "FB_DatabaseManager"

PROPERTY
AUTHOR : ""
VERSION : "0.1"
COMMENT : ""
SCOPE : "PLC_3"
PLCSIM_INSTANCE_NAME : "FB_DatabaseManager"
TEST_EXECUTION_MODE : "SystemManagedPlcSimAdvInstance"
END_PROPERTY

VAR
dataInput0:"FB_DatabaseManager_DBG".dataInput[0];
dataInput1:"FB_DatabaseManager_DBG".dataInput[1];
dataInput2:"FB_DatabaseManager_DBG".dataInput[2];
dataInput3:"FB_DatabaseManager_DBG".dataInput[3];
dataInput4:"FB_DatabaseManager_DBG".dataInput[4];
dataInput5:"FB_DatabaseManager_DBG".dataInput[5];
storeTrigger:"FB_DatabaseManager_DBG".storeTrigger;
resetTrigger:"FB_DatabaseManager_DBG".resetTrigger;
usedSpace:"FB_DatabaseManager_DBG".usedSpace;
remainingSpace:"FB_DatabaseManager_DBG".remainingSpace;
error:"FB_DatabaseManager_DBG".error;
status:"FB_DatabaseManager_DBG".status;

database1:"FB_DatabaseManager_DBG".database[1];
database2:"FB_DatabaseManager_DBG".database[2];
database3:"FB_DatabaseManager_DBG".database[3];
database4:"FB_DatabaseManager_DBG".database[4];
database5:"FB_DatabaseManager_DBG".database[5];
database6:"FB_DatabaseManager_DBG".database[6];
database7:"FB_DatabaseManager_DBG".database[7];
database8:"FB_DatabaseManager_DBG".database[8];
database9:"FB_DatabaseManager_DBG".database[9];
database10:"FB_DatabaseManager_DBG".database[10];
database11:"FB_DatabaseManager_DBG".database[11];
database12:"FB_DatabaseManager_DBG".database[12];
database13:"FB_DatabaseManager_DBG".database[13];
database14:"FB_DatabaseManager_DBG".database[14];
database15:"FB_DatabaseManager_DBG".database[15];
database16:"FB_DatabaseManager_DBG".database[16];
database17:"FB_DatabaseManager_DBG".database[17];
database18:"FB_DatabaseManager_DBG".database[18];
database19:"FB_DatabaseManager_DBG".database[19];
database20:"FB_DatabaseManager_DBG".database[20];

END_VAR

STEP: "Step 1"
dataInput0:=0;
dataInput1:=0;
dataInput2:=0;
dataInput3:=0;
dataInput4:=0;
dataInput5:=0;

storeTrigger:=1;


RUN(CYCLES:=1);
ASSERT.Equal(usedSpace,0);
ASSERT.Equal(remainingSpace,20);
ASSERT.Equal(error,TRUE);
ASSERT.Equal(status,16#8001);

ASSERT.Equal(database1,0);
ASSERT.Equal(database2,0);
ASSERT.Equal(database3,0);
ASSERT.Equal(database4,0);
ASSERT.Equal(database5,0);
ASSERT.Equal(database6,0);
ASSERT.Equal(database7,0);
ASSERT.Equal(database8,0);
ASSERT.Equal(database9,0);
ASSERT.Equal(database10,0);
ASSERT.Equal(database11,0);
ASSERT.Equal(database12,0);
ASSERT.Equal(database13,0);
ASSERT.Equal(database14,0);
ASSERT.Equal(database15,0);
ASSERT.Equal(database16,0);
ASSERT.Equal(database17,0);
ASSERT.Equal(database18,0);
ASSERT.Equal(database19,0);
ASSERT.Equal(database20,0);
END_STEP

STEP: "Step 2"
dataInput0:=6;
dataInput1:=1;
dataInput2:=0;
dataInput3:=1;
dataInput4:=0;
dataInput5:=1;

storeTrigger:=1;


RUN(CYCLES:=1);
ASSERT.Equal(usedSpace,0);
ASSERT.Equal(remainingSpace,20);
ASSERT.Equal(error,TRUE);
ASSERT.Equal(status,16#8001);

ASSERT.Equal(database1,0);
ASSERT.Equal(database2,0);
ASSERT.Equal(database3,0);
ASSERT.Equal(database4,0);
ASSERT.Equal(database5,0);
ASSERT.Equal(database6,0);
ASSERT.Equal(database7,0);
ASSERT.Equal(database8,0);
ASSERT.Equal(database9,0);
ASSERT.Equal(database10,0);
ASSERT.Equal(database11,0);
ASSERT.Equal(database12,0);
ASSERT.Equal(database13,0);
ASSERT.Equal(database14,0);
ASSERT.Equal(database15,0);
ASSERT.Equal(database16,0);
ASSERT.Equal(database17,0);
ASSERT.Equal(database18,0);
ASSERT.Equal(database19,0);
ASSERT.Equal(database20,0);
END_STEP

STEP: "Step 3"
dataInput0:=1;
dataInput1:=1;
dataInput2:=0;
dataInput3:=0;
dataInput4:=0;
dataInput5:=0;

storeTrigger:=0;
//storeTrigger:=1;

RUN(CYCLES:=1);
ASSERT.Equal(usedSpace,0);
ASSERT.Equal(remainingSpace,20);
//ASSERT.Equal(usedSpace,1);
//ASSERT.Equal(remainingSpace,19);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(database1,0);
//ASSERT.Equal(database1,1);
ASSERT.Equal(database2,0);
ASSERT.Equal(database3,0);
ASSERT.Equal(database4,0);
ASSERT.Equal(database5,0);
ASSERT.Equal(database6,0);
ASSERT.Equal(database7,0);
ASSERT.Equal(database8,0);
ASSERT.Equal(database9,0);
ASSERT.Equal(database10,0);
ASSERT.Equal(database11,0);
ASSERT.Equal(database12,0);
ASSERT.Equal(database13,0);
ASSERT.Equal(database14,0);
ASSERT.Equal(database15,0);
ASSERT.Equal(database16,0);
ASSERT.Equal(database17,0);
ASSERT.Equal(database18,0);
ASSERT.Equal(database19,0);
ASSERT.Equal(database20,0);
END_STEP


STEP: "Step 4"
dataInput0:=1;
dataInput1:=1;
dataInput2:=0;
dataInput3:=0;
dataInput4:=0;
dataInput5:=0;

storeTrigger:=1;

RUN(CYCLES:=1);
ASSERT.Equal(usedSpace,1);
ASSERT.Equal(remainingSpace,19);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);
ASSERT.Equal(database1,1);
ASSERT.Equal(database2,0);
ASSERT.Equal(database3,0);
ASSERT.Equal(database4,0);
ASSERT.Equal(database5,0);
ASSERT.Equal(database6,0);
ASSERT.Equal(database7,0);
ASSERT.Equal(database8,0);
ASSERT.Equal(database9,0);
ASSERT.Equal(database10,0);
ASSERT.Equal(database11,0);
ASSERT.Equal(database12,0);
ASSERT.Equal(database13,0);
ASSERT.Equal(database14,0);
ASSERT.Equal(database15,0);
ASSERT.Equal(database16,0);
ASSERT.Equal(database17,0);
ASSERT.Equal(database18,0);
ASSERT.Equal(database19,0);
ASSERT.Equal(database20,0);
END_STEP


STEP: "Step 5"
dataInput0:=4;
dataInput1:=1;
dataInput2:=0;
dataInput3:=0;
dataInput4:=1;
dataInput5:=1;

storeTrigger:=1;


RUN(CYCLES:=1);
ASSERT.Equal(usedSpace,5);
ASSERT.Equal(remainingSpace,15);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(database1,1);
ASSERT.Equal(database2,1);
ASSERT.Equal(database3,0);
ASSERT.Equal(database4,0);
ASSERT.Equal(database5,1);
ASSERT.Equal(database6,0);
ASSERT.Equal(database7,0);
ASSERT.Equal(database8,0);
ASSERT.Equal(database9,0);
ASSERT.Equal(database10,0);
ASSERT.Equal(database11,0);
ASSERT.Equal(database12,0);
ASSERT.Equal(database13,0);
ASSERT.Equal(database14,0);
ASSERT.Equal(database15,0);
ASSERT.Equal(database16,0);
ASSERT.Equal(database17,0);
ASSERT.Equal(database18,0);
ASSERT.Equal(database19,0);
ASSERT.Equal(database20,0);
END_STEP

STEP: "Step 6"
dataInput0:=5;
dataInput1:=1;
dataInput2:=0;
dataInput3:=0;
dataInput4:=1;
dataInput5:=0;

storeTrigger:=1;


RUN(CYCLES:=1);
ASSERT.Equal(usedSpace,10);
ASSERT.Equal(remainingSpace,10);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(database1,1);
ASSERT.Equal(database2,1);
ASSERT.Equal(database3,0);
ASSERT.Equal(database4,0);
ASSERT.Equal(database5,1);
ASSERT.Equal(database6,1);
ASSERT.Equal(database7,0);
ASSERT.Equal(database8,0);
ASSERT.Equal(database9,1);
ASSERT.Equal(database10,0);
ASSERT.Equal(database11,0);
ASSERT.Equal(database12,0);
ASSERT.Equal(database13,0);
ASSERT.Equal(database14,0);
ASSERT.Equal(database15,0);
ASSERT.Equal(database16,0);
ASSERT.Equal(database17,0);
ASSERT.Equal(database18,0);
ASSERT.Equal(database19,0);
ASSERT.Equal(database20,0);
END_STEP

STEP: "Step 7"
dataInput0:=5;
dataInput1:=0;
dataInput2:=0;
dataInput3:=0;
dataInput4:=1;
dataInput5:=1;

storeTrigger:=1;


RUN(CYCLES:=1);
ASSERT.Equal(usedSpace,15);
ASSERT.Equal(remainingSpace,5);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(database1,1);
ASSERT.Equal(database2,1);
ASSERT.Equal(database3,0);
ASSERT.Equal(database4,0);
ASSERT.Equal(database5,1);
ASSERT.Equal(database6,1);
ASSERT.Equal(database7,0);
ASSERT.Equal(database8,0);
ASSERT.Equal(database9,1);
ASSERT.Equal(database10,0);
ASSERT.Equal(database11,0);
ASSERT.Equal(database12,0);
ASSERT.Equal(database13,0);
ASSERT.Equal(database14,1);
ASSERT.Equal(database15,1);
ASSERT.Equal(database16,0);
ASSERT.Equal(database17,0);
ASSERT.Equal(database18,0);
ASSERT.Equal(database19,0);
ASSERT.Equal(database20,0);
END_STEP

STEP: "Step 8"
dataInput0:=5;
dataInput1:=0;
dataInput2:=0;
dataInput3:=0;
dataInput4:=0;
dataInput5:=0;

storeTrigger:=1;


RUN(CYCLES:=1);
ASSERT.Equal(usedSpace,20);
ASSERT.Equal(remainingSpace,0);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(database1,1);
ASSERT.Equal(database2,1);
ASSERT.Equal(database3,0);
ASSERT.Equal(database4,0);
ASSERT.Equal(database5,1);
ASSERT.Equal(database6,1);
ASSERT.Equal(database7,0);
ASSERT.Equal(database8,0);
ASSERT.Equal(database9,1);
ASSERT.Equal(database10,0);
ASSERT.Equal(database11,0);
ASSERT.Equal(database12,0);
ASSERT.Equal(database13,0);
ASSERT.Equal(database14,1);
ASSERT.Equal(database15,1);
ASSERT.Equal(database16,0);
ASSERT.Equal(database17,0);
ASSERT.Equal(database18,0);
ASSERT.Equal(database19,0);
ASSERT.Equal(database20,0);
END_STEP

STEP: "Step 9"
dataInput0:=1;
dataInput1:=0;
dataInput2:=0;
dataInput3:=0;
dataInput4:=0;
dataInput5:=0;

storeTrigger:=1;

RUN(CYCLES:=1);
ASSERT.Equal(usedSpace,20);
ASSERT.Equal(remainingSpace,0);
ASSERT.Equal(error,TRUE);
ASSERT.Equal(status,16#8002);

ASSERT.Equal(database1,1);
ASSERT.Equal(database2,1);
ASSERT.Equal(database3,0);
ASSERT.Equal(database4,0);
ASSERT.Equal(database5,1);
ASSERT.Equal(database6,1);
ASSERT.Equal(database7,0);
ASSERT.Equal(database8,0);
ASSERT.Equal(database9,1);
ASSERT.Equal(database10,0);
ASSERT.Equal(database11,0);
ASSERT.Equal(database12,0);
ASSERT.Equal(database13,0);
ASSERT.Equal(database14,1);
ASSERT.Equal(database15,1);
ASSERT.Equal(database16,0);
ASSERT.Equal(database17,0);
ASSERT.Equal(database18,0);
ASSERT.Equal(database19,0);
ASSERT.Equal(database20,0);
END_STEP

STEP: "Step 10"

resetTrigger:=1;

RUN(CYCLES:=1);
ASSERT.Equal(usedSpace,0);
ASSERT.Equal(remainingSpace,20);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(database1,0);
ASSERT.Equal(database2,0);
ASSERT.Equal(database3,0);
ASSERT.Equal(database4,0);
ASSERT.Equal(database5,0);
ASSERT.Equal(database6,0);
ASSERT.Equal(database7,0);
ASSERT.Equal(database8,0);
ASSERT.Equal(database9,0);
ASSERT.Equal(database10,0);
ASSERT.Equal(database11,0);
ASSERT.Equal(database12,0);
ASSERT.Equal(database13,0);
ASSERT.Equal(database14,0);
ASSERT.Equal(database15,0);
ASSERT.Equal(database16,0);
ASSERT.Equal(database17,0);
ASSERT.Equal(database18,0);
ASSERT.Equal(database19,0);
ASSERT.Equal(database20,0);
END_STEP



END_TEST_CASE

TEST_CASE "FB_LinearizeValue"

PROPERTY
AUTHOR : ""
VERSION : "0.1"
COMMENT : ""
SCOPE : "PLC_3"
PLCSIM_INSTANCE_NAME : "FB_LinearizeValue"
TEST_EXECUTION_MODE : "SystemManagedPlcSimAdvInstance"
END_PROPERTY

VAR
InputValue:"FB_LinearizeValue_DB".InputValue;
LinearizedValue:"FB_LinearizeValue_DB".LinearizedValue;
Error:"FB_LinearizeValue_DB".Error;
Status:"FB_LinearizeValue_DB".Status;
END_VAR

STEP: "Step 1"
InputValue:=1199.99;
RUN(CYCLES:=1);
ASSERT.Equal(LinearizedValue,150);
ASSERT.Equal(Error,1);
ASSERT.Equal(Status,16#8001);
END_STEP

STEP: "Step 2"
InputValue:=7000.11;
RUN(CYCLES:=1);
ASSERT.Equal(LinearizedValue,720);
ASSERT.Equal(Error,1);
ASSERT.Equal(Status,16#8001);
END_STEP

STEP: "Step 3"
InputValue:=1200;
RUN(CYCLES:=1);
ASSERT.Equal(LinearizedValue,150);
ASSERT.Equal(Error,0);
ASSERT.Equal(Status,0);
END_STEP

STEP: "Step 4"
InputValue:=2000.05;
RUN(CYCLES:=1);
ASSERT.InRange(LinearizedValue,180.001,180.002);
ASSERT.Equal(Error,0);
ASSERT.Equal(Status,0);
END_STEP

STEP: "Step 5"
InputValue:=3600;
RUN(CYCLES:=1);
ASSERT.Equal(LinearizedValue,240);
ASSERT.Equal(Error,0);
ASSERT.Equal(Status,0);
END_STEP

STEP: "Step 6"
InputValue:=4000.99;
RUN(CYCLES:=1);
ASSERT.InRange(LinearizedValue,346.930,346.931);
ASSERT.Equal(Error,0);
ASSERT.Equal(Status,0);
END_STEP

STEP: "Step 7"
InputValue:=4800;
RUN(CYCLES:=1);
ASSERT.Equal(LinearizedValue,560);
ASSERT.Equal(Error,0);
ASSERT.Equal(Status,0);
END_STEP

STEP: "Step 8"
InputValue:=5999.002;
RUN(CYCLES:=1);
ASSERT.InRange(LinearizedValue,647.200,647.201);
ASSERT.Equal(Error,0);
ASSERT.Equal(Status,0);
END_STEP

STEP: "Step 9"
InputValue:=7000;
RUN(CYCLES:=1);
ASSERT.Equal(LinearizedValue,720);
ASSERT.Equal(Error,0);
ASSERT.Equal(Status,0);
END_STEP




END_TEST_CASE

TEST_CASE "FB_ProductionLineControl"

PROPERTY
AUTHOR : ""
VERSION : "0.1"
COMMENT : ""
SCOPE : "PLC_3"
PLCSIM_INSTANCE_NAME : "FB_ProductionLineControl"
TEST_EXECUTION_MODE : "SystemManagedPlcSimAdvInstance"
END_PROPERTY

VAR
Mode:"FB_ProductionLineControl_DB".Mode;
ForwardButton:"FB_ProductionLineControl_DB".ForwardButton;
ReverseButton:"FB_ProductionLineControl_DB".ReverseButton;
SensorA:"FB_ProductionLineControl_DB".SensorA;
SensorB:"FB_ProductionLineControl_DB".SensorB;
SensorC:"FB_ProductionLineControl_DB".SensorC;
ButtonA:"FB_ProductionLineControl_DB".ButtonA;
ButtonB:"FB_ProductionLineControl_DB".ButtonB;
ButtonC:"FB_ProductionLineControl_DB".ButtonC;
MotorForward:"FB_ProductionLineControl_DB".MotorForward;
MotorReverse:"FB_ProductionLineControl_DB".MotorReverse;
CompletionLight:"FB_ProductionLineControl_DB".CompletionLight;
END_VAR

STEP: "Step 1"

ForwardButton:=1;

RUN(CYCLES:=1);
ASSERT.Equal(MotorForward,1);
ASSERT.Equal(MotorReverse,0);
ASSERT.Equal(CompletionLight,0);
END_STEP

STEP: "Step 2"

ForwardButton:=0;

RUN(CYCLES:=1);
ASSERT.Equal(MotorForward,0);
ASSERT.Equal(MotorReverse,0);
ASSERT.Equal(CompletionLight,0);
END_STEP

STEP: "Step 3"

ReverseButton:=1;

RUN(CYCLES:=1);
ASSERT.Equal(MotorForward,0);
ASSERT.Equal(MotorReverse,1);
ASSERT.Equal(CompletionLight,0);
END_STEP

STEP: "Step 4"
Mode:=1;

RUN(CYCLES:=1);
ASSERT.Equal(MotorForward,0);
ASSERT.Equal(MotorReverse,0);
ASSERT.Equal(CompletionLight,0);
END_STEP

STEP: "Step 5"
Mode:=1;
SensorA:=1;

RUN(CYCLES:=1);
ASSERT.Equal(MotorForward,0);
ASSERT.Equal(MotorReverse,0);
ASSERT.Equal(CompletionLight,0);
END_STEP

STEP: "Step 6"
Mode:=1;
SensorA:=1;
ButtonA:=1;

RUN(CYCLES:=1);
ASSERT.Equal(MotorForward,1);
ASSERT.Equal(MotorReverse,0);
ASSERT.Equal(CompletionLight,0);
END_STEP

STEP: "Step 7"
Mode:=1;
SensorB:=1;
SensorA:=0;

RUN(CYCLES:=1);
ASSERT.Equal(MotorForward,0);
ASSERT.Equal(MotorReverse,0);
ASSERT.Equal(CompletionLight,0);
END_STEP

STEP: "Step 8"
Mode:=1;
SensorB:=1;
ButtonB:=1;

RUN(CYCLES:=1);
ASSERT.Equal(MotorForward,1);
ASSERT.Equal(MotorReverse,0);
ASSERT.Equal(CompletionLight,0);
END_STEP

STEP: "Step 9"
Mode:=1;
SensorC:=1;
SensorB:=0;

RUN(CYCLES:=1);
ASSERT.Equal(MotorForward,0);
ASSERT.Equal(MotorReverse,0);
ASSERT.Equal(CompletionLight,0);
END_STEP

STEP: "Step 10"
Mode:=1;
SensorC:=1;
ButtonC:=1;
RUN(CYCLES:=1);
ASSERT.Equal(MotorForward,0);
ASSERT.Equal(MotorReverse,0);
ASSERT.Equal(CompletionLight,1);
END_STEP

STEP: "Step 11"
Mode:=1;
SensorC:=0;

RUN(CYCLES:=1);
ASSERT.Equal(MotorForward,0);
ASSERT.Equal(MotorReverse,0);
ASSERT.Equal(CompletionLight,0);
END_STEP




END_TEST_CASE

TEST_CASE "FB_RecipeManager"

PROPERTY
AUTHOR : ""
VERSION : "0.1"
COMMENT : ""
SCOPE : "PLC_3"
PLCSIM_INSTANCE_NAME : "FB_RecipeManager"
TEST_EXECUTION_MODE : "SystemManagedPlcSimAdvInstance"
END_PROPERTY

VAR
addRecipe:"FB_RecipeManager_DBG".addRecipe;
deleteRecipe:"FB_RecipeManager_DBG".deleteRecipe;
modifyRecipe:"FB_RecipeManager_DBG".modifyRecipe;
queryRecipe:"FB_RecipeManager_DBG".queryRecipe;
recipeIn_recipeID:"FB_RecipeManager_DBG".recipeIn.recipeID;
recipeIn_ingredientType:"FB_RecipeManager_DBG".recipeIn.ingredientType;
recipeIn_ingredientRatio:"FB_RecipeManager_DBG".recipeIn.ingredientRatio;
recipeIn_productionTemperature:"FB_RecipeManager_DBG".recipeIn.productionTemperature;
recipeAdded:"FB_RecipeManager_DBG".recipeAdded;
recipeDeleted:"FB_RecipeManager_DBG".recipeDeleted;
recipeModified:"FB_RecipeManager_DBG".recipeModified;
recipeQueryResult_recipeID:"FB_RecipeManager_DBG".recipeQueryResult.recipeID;
recipeQueryResult_ingredientType:"FB_RecipeManager_DBG".recipeQueryResult.ingredientType;
recipeQueryResult_ingredientRatio:"FB_RecipeManager_DBG".recipeQueryResult.ingredientRatio;
recipeQueryResult_productionTemperature:"FB_RecipeManager_DBG".recipeQueryResult.productionTemperature;
error:"FB_RecipeManager_DBG".error;
status:"FB_RecipeManager_DBG".status;

recipe1_recipeID:"FB_RecipeManager_DBG".recipe[1].recipeID;
recipe1_ingredientType:"FB_RecipeManager_DBG".recipe[1].ingredientType;
recipe1_ingredientRatio:"FB_RecipeManager_DBG".recipe[1].ingredientRatio;
recipe1_productionTemperature:"FB_RecipeManager_DBG".recipe[1].productionTemperature;

recipe2_recipeID:"FB_RecipeManager_DBG".recipe[2].recipeID;
recipe2_ingredientType:"FB_RecipeManager_DBG".recipe[2].ingredientType;
recipe2_ingredientRatio:"FB_RecipeManager_DBG".recipe[2].ingredientRatio;
recipe2_productionTemperature:"FB_RecipeManager_DBG".recipe[2].productionTemperature;

recipe3_recipeID:"FB_RecipeManager_DBG".recipe[3].recipeID;
recipe3_ingredientType:"FB_RecipeManager_DBG".recipe[3].ingredientType;
recipe3_ingredientRatio:"FB_RecipeManager_DBG".recipe[3].ingredientRatio;
recipe3_productionTemperature:"FB_RecipeManager_DBG".recipe[3].productionTemperature;

recipe4_recipeID:"FB_RecipeManager_DBG".recipe[4].recipeID;
recipe4_ingredientType:"FB_RecipeManager_DBG".recipe[4].ingredientType;
recipe4_ingredientRatio:"FB_RecipeManager_DBG".recipe[4].ingredientRatio;
recipe4_productionTemperature:"FB_RecipeManager_DBG".recipe[4].productionTemperature;

recipe5_recipeID:"FB_RecipeManager_DBG".recipe[5].recipeID;
recipe5_ingredientType:"FB_RecipeManager_DBG".recipe[5].ingredientType;
recipe5_ingredientRatio:"FB_RecipeManager_DBG".recipe[5].ingredientRatio;
recipe5_productionTemperature:"FB_RecipeManager_DBG".recipe[5].productionTemperature;

recipe6_recipeID:"FB_RecipeManager_DBG".recipe[6].recipeID;
recipe6_ingredientType:"FB_RecipeManager_DBG".recipe[6].ingredientType;
recipe6_ingredientRatio:"FB_RecipeManager_DBG".recipe[6].ingredientRatio;
recipe6_productionTemperature:"FB_RecipeManager_DBG".recipe[6].productionTemperature;

recipe7_recipeID:"FB_RecipeManager_DBG".recipe[7].recipeID;
recipe7_ingredientType:"FB_RecipeManager_DBG".recipe[7].ingredientType;
recipe7_ingredientRatio:"FB_RecipeManager_DBG".recipe[7].ingredientRatio;
recipe7_productionTemperature:"FB_RecipeManager_DBG".recipe[7].productionTemperature;

recipe8_recipeID:"FB_RecipeManager_DBG".recipe[8].recipeID;
recipe8_ingredientType:"FB_RecipeManager_DBG".recipe[8].ingredientType;
recipe8_ingredientRatio:"FB_RecipeManager_DBG".recipe[8].ingredientRatio;
recipe8_productionTemperature:"FB_RecipeManager_DBG".recipe[8].productionTemperature;

recipe9_recipeID:"FB_RecipeManager_DBG".recipe[9].recipeID;
recipe9_ingredientType:"FB_RecipeManager_DBG".recipe[9].ingredientType;
recipe9_ingredientRatio:"FB_RecipeManager_DBG".recipe[9].ingredientRatio;
recipe9_productionTemperature:"FB_RecipeManager_DBG".recipe[9].productionTemperature;

recipe10_recipeID:"FB_RecipeManager_DBG".recipe[10].recipeID;
recipe10_ingredientType:"FB_RecipeManager_DBG".recipe[10].ingredientType;
recipe10_ingredientRatio:"FB_RecipeManager_DBG".recipe[10].ingredientRatio;
recipe10_productionTemperature:"FB_RecipeManager_DBG".recipe[10].productionTemperature;
END_VAR


STEP: "Step 1"
addRecipe:=0;
deleteRecipe:=1;
modifyRecipe:=0;
queryRecipe:=0;
recipeIn_recipeID:=1;
recipeIn_ingredientType:=1;
recipeIn_ingredientRatio:=0.98;
recipeIn_productionTemperature:=36;

RUN(CYCLES:=1);
ASSERT.Equal(recipeAdded,0);
ASSERT.Equal(recipeDeleted,0);
ASSERT.Equal(recipeModified,0);
ASSERT.Equal(recipeQueryResult_recipeID,0);
ASSERT.Equal(recipeQueryResult_ingredientType,0);
ASSERT.Equal(recipeQueryResult_ingredientRatio,0);
ASSERT.Equal(recipeQueryResult_productionTemperature,0);
ASSERT.Equal(error,1);
ASSERT.Equal(status,16#8004);

ASSERT.Equal(recipe1_recipeID,0);
ASSERT.Equal(recipe1_ingredientType,0);
ASSERT.Equal(recipe1_ingredientRatio,0);
ASSERT.Equal(recipe1_productionTemperature,0);
ASSERT.Equal(recipe2_recipeID,0);
ASSERT.Equal(recipe2_ingredientType,0);
ASSERT.Equal(recipe2_ingredientRatio,0);
ASSERT.Equal(recipe2_productionTemperature,0);
ASSERT.Equal(recipe3_recipeID,0);
ASSERT.Equal(recipe3_ingredientType,0);
ASSERT.Equal(recipe3_ingredientRatio,0);
ASSERT.Equal(recipe3_productionTemperature,0);
ASSERT.Equal(recipe4_recipeID,0);
ASSERT.Equal(recipe4_ingredientType,0);
ASSERT.Equal(recipe4_ingredientRatio,0);
ASSERT.Equal(recipe4_productionTemperature,0);
ASSERT.Equal(recipe5_recipeID,0);
ASSERT.Equal(recipe5_ingredientType,0);
ASSERT.Equal(recipe5_ingredientRatio,0);
ASSERT.Equal(recipe5_productionTemperature,0);
ASSERT.Equal(recipe6_recipeID,0);
ASSERT.Equal(recipe6_ingredientType,0);
ASSERT.Equal(recipe6_ingredientRatio,0);
ASSERT.Equal(recipe6_productionTemperature,0);
ASSERT.Equal(recipe7_recipeID,0);
ASSERT.Equal(recipe7_ingredientType,0);
ASSERT.Equal(recipe7_ingredientRatio,0);
ASSERT.Equal(recipe7_productionTemperature,0);
ASSERT.Equal(recipe8_recipeID,0);
ASSERT.Equal(recipe8_ingredientType,0);
ASSERT.Equal(recipe8_ingredientRatio,0);
ASSERT.Equal(recipe8_productionTemperature,0);
ASSERT.Equal(recipe9_recipeID,0);
ASSERT.Equal(recipe9_ingredientType,0);
ASSERT.Equal(recipe9_ingredientRatio,0);
ASSERT.Equal(recipe9_productionTemperature,0);
ASSERT.Equal(recipe10_recipeID,0);
ASSERT.Equal(recipe10_ingredientType,0);
ASSERT.Equal(recipe10_ingredientRatio,0);
ASSERT.Equal(recipe10_productionTemperature,0);

END_STEP

STEP: "Step 2"
addRecipe:=1;
deleteRecipe:=0;
modifyRecipe:=0;
queryRecipe:=0;
recipeIn_recipeID:=1;
recipeIn_ingredientType:=1;
recipeIn_ingredientRatio:=0.98;
recipeIn_productionTemperature:=36;

RUN(CYCLES:=1);
ASSERT.Equal(recipeAdded,1);
ASSERT.Equal(recipeDeleted,0);
ASSERT.Equal(recipeModified,0);
ASSERT.Equal(recipeQueryResult_recipeID,0);
ASSERT.Equal(recipeQueryResult_ingredientType,0);
ASSERT.Equal(recipeQueryResult_ingredientRatio,0);
ASSERT.Equal(recipeQueryResult_productionTemperature,0);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(recipe1_recipeID,1);
ASSERT.Equal(recipe1_ingredientType,1);
ASSERT.Equal(recipe1_ingredientRatio,0.98);
ASSERT.Equal(recipe1_productionTemperature,36);
ASSERT.Equal(recipe2_recipeID,0);
ASSERT.Equal(recipe2_ingredientType,0);
ASSERT.Equal(recipe2_ingredientRatio,0);
ASSERT.Equal(recipe2_productionTemperature,0);
ASSERT.Equal(recipe3_recipeID,0);
ASSERT.Equal(recipe3_ingredientType,0);
ASSERT.Equal(recipe3_ingredientRatio,0);
ASSERT.Equal(recipe3_productionTemperature,0);
ASSERT.Equal(recipe4_recipeID,0);
ASSERT.Equal(recipe4_ingredientType,0);
ASSERT.Equal(recipe4_ingredientRatio,0);
ASSERT.Equal(recipe4_productionTemperature,0);
ASSERT.Equal(recipe5_recipeID,0);
ASSERT.Equal(recipe5_ingredientType,0);
ASSERT.Equal(recipe5_ingredientRatio,0);
ASSERT.Equal(recipe5_productionTemperature,0);
ASSERT.Equal(recipe6_recipeID,0);
ASSERT.Equal(recipe6_ingredientType,0);
ASSERT.Equal(recipe6_ingredientRatio,0);
ASSERT.Equal(recipe6_productionTemperature,0);
ASSERT.Equal(recipe7_recipeID,0);
ASSERT.Equal(recipe7_ingredientType,0);
ASSERT.Equal(recipe7_ingredientRatio,0);
ASSERT.Equal(recipe7_productionTemperature,0);
ASSERT.Equal(recipe8_recipeID,0);
ASSERT.Equal(recipe8_ingredientType,0);
ASSERT.Equal(recipe8_ingredientRatio,0);
ASSERT.Equal(recipe8_productionTemperature,0);
ASSERT.Equal(recipe9_recipeID,0);
ASSERT.Equal(recipe9_ingredientType,0);
ASSERT.Equal(recipe9_ingredientRatio,0);
ASSERT.Equal(recipe9_productionTemperature,0);
ASSERT.Equal(recipe10_recipeID,0);
ASSERT.Equal(recipe10_ingredientType,0);
ASSERT.Equal(recipe10_ingredientRatio,0);
ASSERT.Equal(recipe10_productionTemperature,0);

END_STEP

STEP: "Step 3"
addRecipe:=0;
deleteRecipe:=0;
modifyRecipe:=0;
queryRecipe:=1;
recipeIn_recipeID:=1;
recipeIn_ingredientType:=0;
recipeIn_ingredientRatio:=0;
recipeIn_productionTemperature:=0;

RUN(CYCLES:=1);
ASSERT.Equal(recipeAdded,0);
ASSERT.Equal(recipeDeleted,0);
ASSERT.Equal(recipeModified,0);
ASSERT.Equal(recipeQueryResult_recipeID,1);
ASSERT.Equal(recipeQueryResult_ingredientType,1);
ASSERT.Equal(recipeQueryResult_ingredientRatio,0.98);
ASSERT.Equal(recipeQueryResult_productionTemperature,36);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(recipe1_recipeID,1);
ASSERT.Equal(recipe1_ingredientType,1);
ASSERT.Equal(recipe1_ingredientRatio,0.98);
ASSERT.Equal(recipe1_productionTemperature,36);
ASSERT.Equal(recipe2_recipeID,0);
ASSERT.Equal(recipe2_ingredientType,0);
ASSERT.Equal(recipe2_ingredientRatio,0);
ASSERT.Equal(recipe2_productionTemperature,0);
ASSERT.Equal(recipe3_recipeID,0);
ASSERT.Equal(recipe3_ingredientType,0);
ASSERT.Equal(recipe3_ingredientRatio,0);
ASSERT.Equal(recipe3_productionTemperature,0);
ASSERT.Equal(recipe4_recipeID,0);
ASSERT.Equal(recipe4_ingredientType,0);
ASSERT.Equal(recipe4_ingredientRatio,0);
ASSERT.Equal(recipe4_productionTemperature,0);
ASSERT.Equal(recipe5_recipeID,0);
ASSERT.Equal(recipe5_ingredientType,0);
ASSERT.Equal(recipe5_ingredientRatio,0);
ASSERT.Equal(recipe5_productionTemperature,0);
ASSERT.Equal(recipe6_recipeID,0);
ASSERT.Equal(recipe6_ingredientType,0);
ASSERT.Equal(recipe6_ingredientRatio,0);
ASSERT.Equal(recipe6_productionTemperature,0);
ASSERT.Equal(recipe7_recipeID,0);
ASSERT.Equal(recipe7_ingredientType,0);
ASSERT.Equal(recipe7_ingredientRatio,0);
ASSERT.Equal(recipe7_productionTemperature,0);
ASSERT.Equal(recipe8_recipeID,0);
ASSERT.Equal(recipe8_ingredientType,0);
ASSERT.Equal(recipe8_ingredientRatio,0);
ASSERT.Equal(recipe8_productionTemperature,0);
ASSERT.Equal(recipe9_recipeID,0);
ASSERT.Equal(recipe9_ingredientType,0);
ASSERT.Equal(recipe9_ingredientRatio,0);
ASSERT.Equal(recipe9_productionTemperature,0);
ASSERT.Equal(recipe10_recipeID,0);
ASSERT.Equal(recipe10_ingredientType,0);
ASSERT.Equal(recipe10_ingredientRatio,0);
ASSERT.Equal(recipe10_productionTemperature,0);

END_STEP

STEP: "Step 4"
addRecipe:=0;
deleteRecipe:=0;
modifyRecipe:=0;
queryRecipe:=1;
recipeIn_recipeID:=2;
recipeIn_ingredientType:=1;
recipeIn_ingredientRatio:=0.98;
recipeIn_productionTemperature:=36;

RUN(CYCLES:=1);
ASSERT.Equal(recipeAdded,0);
ASSERT.Equal(recipeDeleted,0);
ASSERT.Equal(recipeModified,0);
//ASSERT.Equal(recipeQueryResult_recipeID,0);
//ASSERT.Equal(recipeQueryResult_ingredientType,0);
//ASSERT.Equal(recipeQueryResult_ingredientRatio,0);
//ASSERT.Equal(recipeQueryResult_productionTemperature,0);
ASSERT.Equal(error,1);
ASSERT.Equal(status,16#8001);

ASSERT.Equal(recipe1_recipeID,1);
ASSERT.Equal(recipe1_ingredientType,1);
ASSERT.Equal(recipe1_ingredientRatio,0.98);
ASSERT.Equal(recipe1_productionTemperature,36);
ASSERT.Equal(recipe2_recipeID,0);
ASSERT.Equal(recipe2_ingredientType,0);
ASSERT.Equal(recipe2_ingredientRatio,0);
ASSERT.Equal(recipe2_productionTemperature,0);
ASSERT.Equal(recipe3_recipeID,0);
ASSERT.Equal(recipe3_ingredientType,0);
ASSERT.Equal(recipe3_ingredientRatio,0);
ASSERT.Equal(recipe3_productionTemperature,0);
ASSERT.Equal(recipe4_recipeID,0);
ASSERT.Equal(recipe4_ingredientType,0);
ASSERT.Equal(recipe4_ingredientRatio,0);
ASSERT.Equal(recipe4_productionTemperature,0);
ASSERT.Equal(recipe5_recipeID,0);
ASSERT.Equal(recipe5_ingredientType,0);
ASSERT.Equal(recipe5_ingredientRatio,0);
ASSERT.Equal(recipe5_productionTemperature,0);
ASSERT.Equal(recipe6_recipeID,0);
ASSERT.Equal(recipe6_ingredientType,0);
ASSERT.Equal(recipe6_ingredientRatio,0);
ASSERT.Equal(recipe6_productionTemperature,0);
ASSERT.Equal(recipe7_recipeID,0);
ASSERT.Equal(recipe7_ingredientType,0);
ASSERT.Equal(recipe7_ingredientRatio,0);
ASSERT.Equal(recipe7_productionTemperature,0);
ASSERT.Equal(recipe8_recipeID,0);
ASSERT.Equal(recipe8_ingredientType,0);
ASSERT.Equal(recipe8_ingredientRatio,0);
ASSERT.Equal(recipe8_productionTemperature,0);
ASSERT.Equal(recipe9_recipeID,0);
ASSERT.Equal(recipe9_ingredientType,0);
ASSERT.Equal(recipe9_ingredientRatio,0);
ASSERT.Equal(recipe9_productionTemperature,0);
ASSERT.Equal(recipe10_recipeID,0);
ASSERT.Equal(recipe10_ingredientType,0);
ASSERT.Equal(recipe10_ingredientRatio,0);
ASSERT.Equal(recipe10_productionTemperature,0);

END_STEP

STEP: "Step 5"
addRecipe:=0;
deleteRecipe:=0;
modifyRecipe:=1;
queryRecipe:=0;
recipeIn_recipeID:=2;
recipeIn_ingredientType:=1;
recipeIn_ingredientRatio:=0.98;
recipeIn_productionTemperature:=36;

RUN(CYCLES:=1);
ASSERT.Equal(recipeAdded,0);
ASSERT.Equal(recipeDeleted,0);
ASSERT.Equal(recipeModified,0);
//ASSERT.Equal(recipeQueryResult_recipeID,0);
//ASSERT.Equal(recipeQueryResult_ingredientType,0);
//ASSERT.Equal(recipeQueryResult_ingredientRatio,0);
//ASSERT.Equal(recipeQueryResult_productionTemperature,0);
ASSERT.Equal(error,1);
ASSERT.Equal(status,16#8005);

ASSERT.Equal(recipe1_recipeID,1);
ASSERT.Equal(recipe1_ingredientType,1);
ASSERT.Equal(recipe1_ingredientRatio,0.98);
ASSERT.Equal(recipe1_productionTemperature,36);
ASSERT.Equal(recipe2_recipeID,0);
ASSERT.Equal(recipe2_ingredientType,0);
ASSERT.Equal(recipe2_ingredientRatio,0);
ASSERT.Equal(recipe2_productionTemperature,0);
ASSERT.Equal(recipe3_recipeID,0);
ASSERT.Equal(recipe3_ingredientType,0);
ASSERT.Equal(recipe3_ingredientRatio,0);
ASSERT.Equal(recipe3_productionTemperature,0);
ASSERT.Equal(recipe4_recipeID,0);
ASSERT.Equal(recipe4_ingredientType,0);
ASSERT.Equal(recipe4_ingredientRatio,0);
ASSERT.Equal(recipe4_productionTemperature,0);
ASSERT.Equal(recipe5_recipeID,0);
ASSERT.Equal(recipe5_ingredientType,0);
ASSERT.Equal(recipe5_ingredientRatio,0);
ASSERT.Equal(recipe5_productionTemperature,0);
ASSERT.Equal(recipe6_recipeID,0);
ASSERT.Equal(recipe6_ingredientType,0);
ASSERT.Equal(recipe6_ingredientRatio,0);
ASSERT.Equal(recipe6_productionTemperature,0);
ASSERT.Equal(recipe7_recipeID,0);
ASSERT.Equal(recipe7_ingredientType,0);
ASSERT.Equal(recipe7_ingredientRatio,0);
ASSERT.Equal(recipe7_productionTemperature,0);
ASSERT.Equal(recipe8_recipeID,0);
ASSERT.Equal(recipe8_ingredientType,0);
ASSERT.Equal(recipe8_ingredientRatio,0);
ASSERT.Equal(recipe8_productionTemperature,0);
ASSERT.Equal(recipe9_recipeID,0);
ASSERT.Equal(recipe9_ingredientType,0);
ASSERT.Equal(recipe9_ingredientRatio,0);
ASSERT.Equal(recipe9_productionTemperature,0);
ASSERT.Equal(recipe10_recipeID,0);
ASSERT.Equal(recipe10_ingredientType,0);
ASSERT.Equal(recipe10_ingredientRatio,0);
ASSERT.Equal(recipe10_productionTemperature,0);

END_STEP

STEP: "Step 6"
addRecipe:=0;
deleteRecipe:=0;
modifyRecipe:=1;
queryRecipe:=0;
recipeIn_recipeID:=1;
recipeIn_ingredientType:=2;
recipeIn_ingredientRatio:=0.98;
recipeIn_productionTemperature:=36;

RUN(CYCLES:=1);
ASSERT.Equal(recipeAdded,0);
ASSERT.Equal(recipeDeleted,0);
ASSERT.Equal(recipeModified,1);
//ASSERT.Equal(recipeQueryResult_recipeID,0);
//ASSERT.Equal(recipeQueryResult_ingredientType,0);
//ASSERT.Equal(recipeQueryResult_ingredientRatio,0);
//ASSERT.Equal(recipeQueryResult_productionTemperature,0);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(recipe1_recipeID,1);
ASSERT.Equal(recipe1_ingredientType,2);
ASSERT.Equal(recipe1_ingredientRatio,0.98);
ASSERT.Equal(recipe1_productionTemperature,36);
ASSERT.Equal(recipe2_recipeID,0);
ASSERT.Equal(recipe2_ingredientType,0);
ASSERT.Equal(recipe2_ingredientRatio,0);
ASSERT.Equal(recipe2_productionTemperature,0);
ASSERT.Equal(recipe3_recipeID,0);
ASSERT.Equal(recipe3_ingredientType,0);
ASSERT.Equal(recipe3_ingredientRatio,0);
ASSERT.Equal(recipe3_productionTemperature,0);
ASSERT.Equal(recipe4_recipeID,0);
ASSERT.Equal(recipe4_ingredientType,0);
ASSERT.Equal(recipe4_ingredientRatio,0);
ASSERT.Equal(recipe4_productionTemperature,0);
ASSERT.Equal(recipe5_recipeID,0);
ASSERT.Equal(recipe5_ingredientType,0);
ASSERT.Equal(recipe5_ingredientRatio,0);
ASSERT.Equal(recipe5_productionTemperature,0);
ASSERT.Equal(recipe6_recipeID,0);
ASSERT.Equal(recipe6_ingredientType,0);
ASSERT.Equal(recipe6_ingredientRatio,0);
ASSERT.Equal(recipe6_productionTemperature,0);
ASSERT.Equal(recipe7_recipeID,0);
ASSERT.Equal(recipe7_ingredientType,0);
ASSERT.Equal(recipe7_ingredientRatio,0);
ASSERT.Equal(recipe7_productionTemperature,0);
ASSERT.Equal(recipe8_recipeID,0);
ASSERT.Equal(recipe8_ingredientType,0);
ASSERT.Equal(recipe8_ingredientRatio,0);
ASSERT.Equal(recipe8_productionTemperature,0);
ASSERT.Equal(recipe9_recipeID,0);
ASSERT.Equal(recipe9_ingredientType,0);
ASSERT.Equal(recipe9_ingredientRatio,0);
ASSERT.Equal(recipe9_productionTemperature,0);
ASSERT.Equal(recipe10_recipeID,0);
ASSERT.Equal(recipe10_ingredientType,0);
ASSERT.Equal(recipe10_ingredientRatio,0);
ASSERT.Equal(recipe10_productionTemperature,0);

END_STEP



STEP: "Step 7"
addRecipe:=1;
deleteRecipe:=0;
modifyRecipe:=0;
queryRecipe:=0;
recipeIn_recipeID:=10;
recipeIn_ingredientType:=10;
recipeIn_ingredientRatio:=0.55;
recipeIn_productionTemperature:=55;

recipe1_recipeID:=1;
recipe1_ingredientType:=2;
recipe1_ingredientRatio:=0.98;
recipe1_productionTemperature:=36;
recipe2_recipeID:=2;
recipe2_ingredientType:=2;
recipe2_ingredientRatio:=0.98;
recipe2_productionTemperature:=36;
recipe3_recipeID:=3;
recipe3_ingredientType:=2;
recipe3_ingredientRatio:=0.98;
recipe3_productionTemperature:=36;
recipe4_recipeID:=4;
recipe4_ingredientType:=2;
recipe4_ingredientRatio:=0.98;
recipe4_productionTemperature:=36;
recipe5_recipeID:=5;
recipe5_ingredientType:=2;
recipe5_ingredientRatio:=0.98;
recipe5_productionTemperature:=36;
recipe6_recipeID:=6;
recipe6_ingredientType:=2;
recipe6_ingredientRatio:=0.98;
recipe6_productionTemperature:=36;
recipe7_recipeID:=7;
recipe7_ingredientType:=2;
recipe7_ingredientRatio:=0.98;
recipe7_productionTemperature:=36;
recipe8_recipeID:=8;
recipe8_ingredientType:=2;
recipe8_ingredientRatio:=0.98;
recipe8_productionTemperature:=36;
recipe9_recipeID:=9;
recipe9_ingredientType:=2;
recipe9_ingredientRatio:=0.98;
recipe9_productionTemperature:=36;
recipe10_recipeID:=0;
recipe10_ingredientType:=1;
recipe10_ingredientRatio:=0.66;
recipe10_productionTemperature:=66;

RUN(CYCLES:=1);
ASSERT.Equal(recipeAdded,1);
ASSERT.Equal(recipeDeleted,0);
ASSERT.Equal(recipeModified,0);
//ASSERT.Equal(recipeQueryResult_recipeID,0);
//ASSERT.Equal(recipeQueryResult_ingredientType,0);
//ASSERT.Equal(recipeQueryResult_ingredientRatio,0);
//ASSERT.Equal(recipeQueryResult_productionTemperature,0);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(recipe1_recipeID,1);
ASSERT.Equal(recipe1_ingredientType,2);
ASSERT.Equal(recipe1_ingredientRatio,0.98);
ASSERT.Equal(recipe1_productionTemperature,36);
ASSERT.Equal(recipe2_recipeID,2);
ASSERT.Equal(recipe2_ingredientType,2);
ASSERT.Equal(recipe2_ingredientRatio,0.98);
ASSERT.Equal(recipe2_productionTemperature,36);
ASSERT.Equal(recipe3_recipeID,3);
ASSERT.Equal(recipe3_ingredientType,2);
ASSERT.Equal(recipe3_ingredientRatio,0.98);
ASSERT.Equal(recipe3_productionTemperature,36);
ASSERT.Equal(recipe4_recipeID,4);
ASSERT.Equal(recipe4_ingredientType,2);
ASSERT.Equal(recipe4_ingredientRatio,0.98);
ASSERT.Equal(recipe4_productionTemperature,36);
ASSERT.Equal(recipe5_recipeID,5);
ASSERT.Equal(recipe5_ingredientType,2);
ASSERT.Equal(recipe5_ingredientRatio,0.98);
ASSERT.Equal(recipe5_productionTemperature,36);
ASSERT.Equal(recipe6_recipeID,6);
ASSERT.Equal(recipe6_ingredientType,2);
ASSERT.Equal(recipe6_ingredientRatio,0.98);
ASSERT.Equal(recipe6_productionTemperature,36);
ASSERT.Equal(recipe7_recipeID,7);
ASSERT.Equal(recipe7_ingredientType,2);
ASSERT.Equal(recipe7_ingredientRatio,0.98);
ASSERT.Equal(recipe7_productionTemperature,36);
ASSERT.Equal(recipe8_recipeID,8);
ASSERT.Equal(recipe8_ingredientType,2);
ASSERT.Equal(recipe8_ingredientRatio,0.98);
ASSERT.Equal(recipe8_productionTemperature,36);
ASSERT.Equal(recipe9_recipeID,9);
ASSERT.Equal(recipe9_ingredientType,2);
ASSERT.Equal(recipe9_ingredientRatio,0.98);
ASSERT.Equal(recipe9_productionTemperature,36);
ASSERT.Equal(recipe10_recipeID,10);
ASSERT.Equal(recipe10_ingredientType,10);
ASSERT.Equal(recipe10_ingredientRatio,0.55);
ASSERT.Equal(recipe10_productionTemperature,55);

END_STEP


STEP: "Step 8"
addRecipe:=1;
deleteRecipe:=0;
modifyRecipe:=0;
queryRecipe:=0;
recipeIn_recipeID:=10;
recipeIn_ingredientType:=10;
recipeIn_ingredientRatio:=0.44;
recipeIn_productionTemperature:=44;

RUN(CYCLES:=1);
ASSERT.Equal(recipeAdded,0);
ASSERT.Equal(recipeDeleted,0);
ASSERT.Equal(recipeModified,0);
//ASSERT.Equal(recipeQueryResult_recipeID,0);
//ASSERT.Equal(recipeQueryResult_ingredientType,0);
//ASSERT.Equal(recipeQueryResult_ingredientRatio,0);
//ASSERT.Equal(recipeQueryResult_productionTemperature,0);
ASSERT.Equal(error,1);
ASSERT.Equal(status,16#8002);

ASSERT.Equal(recipe1_recipeID,1);
ASSERT.Equal(recipe1_ingredientType,2);
ASSERT.Equal(recipe1_ingredientRatio,0.98);
ASSERT.Equal(recipe1_productionTemperature,36);
ASSERT.Equal(recipe2_recipeID,2);
ASSERT.Equal(recipe2_ingredientType,2);
ASSERT.Equal(recipe2_ingredientRatio,0.98);
ASSERT.Equal(recipe2_productionTemperature,36);
ASSERT.Equal(recipe3_recipeID,3);
ASSERT.Equal(recipe3_ingredientType,2);
ASSERT.Equal(recipe3_ingredientRatio,0.98);
ASSERT.Equal(recipe3_productionTemperature,36);
ASSERT.Equal(recipe4_recipeID,4);
ASSERT.Equal(recipe4_ingredientType,2);
ASSERT.Equal(recipe4_ingredientRatio,0.98);
ASSERT.Equal(recipe4_productionTemperature,36);
ASSERT.Equal(recipe5_recipeID,5);
ASSERT.Equal(recipe5_ingredientType,2);
ASSERT.Equal(recipe5_ingredientRatio,0.98);
ASSERT.Equal(recipe5_productionTemperature,36);
ASSERT.Equal(recipe6_recipeID,6);
ASSERT.Equal(recipe6_ingredientType,2);
ASSERT.Equal(recipe6_ingredientRatio,0.98);
ASSERT.Equal(recipe6_productionTemperature,36);
ASSERT.Equal(recipe7_recipeID,7);
ASSERT.Equal(recipe7_ingredientType,2);
ASSERT.Equal(recipe7_ingredientRatio,0.98);
ASSERT.Equal(recipe7_productionTemperature,36);
ASSERT.Equal(recipe8_recipeID,8);
ASSERT.Equal(recipe8_ingredientType,2);
ASSERT.Equal(recipe8_ingredientRatio,0.98);
ASSERT.Equal(recipe8_productionTemperature,36);
ASSERT.Equal(recipe9_recipeID,9);
ASSERT.Equal(recipe9_ingredientType,2);
ASSERT.Equal(recipe9_ingredientRatio,0.98);
ASSERT.Equal(recipe9_productionTemperature,36);
ASSERT.Equal(recipe10_recipeID,10);
ASSERT.Equal(recipe10_ingredientType,10);
ASSERT.Equal(recipe10_ingredientRatio,0.55);
ASSERT.Equal(recipe10_productionTemperature,55);

END_STEP

STEP: "Step 9"
addRecipe:=1;
deleteRecipe:=0;
modifyRecipe:=0;
queryRecipe:=0;
recipeIn_recipeID:=11;
recipeIn_ingredientType:=10;
recipeIn_ingredientRatio:=0.44;
recipeIn_productionTemperature:=44;

RUN(CYCLES:=1);
ASSERT.Equal(recipeAdded,0);
ASSERT.Equal(recipeDeleted,0);
ASSERT.Equal(recipeModified,0);
//ASSERT.Equal(recipeQueryResult_recipeID,0);
//ASSERT.Equal(recipeQueryResult_ingredientType,0);
//ASSERT.Equal(recipeQueryResult_ingredientRatio,0);
//ASSERT.Equal(recipeQueryResult_productionTemperature,0);
ASSERT.Equal(error,1);
ASSERT.Equal(status,16#8003);

ASSERT.Equal(recipe1_recipeID,1);
ASSERT.Equal(recipe1_ingredientType,2);
ASSERT.Equal(recipe1_ingredientRatio,0.98);
ASSERT.Equal(recipe1_productionTemperature,36);
ASSERT.Equal(recipe2_recipeID,2);
ASSERT.Equal(recipe2_ingredientType,2);
ASSERT.Equal(recipe2_ingredientRatio,0.98);
ASSERT.Equal(recipe2_productionTemperature,36);
ASSERT.Equal(recipe3_recipeID,3);
ASSERT.Equal(recipe3_ingredientType,2);
ASSERT.Equal(recipe3_ingredientRatio,0.98);
ASSERT.Equal(recipe3_productionTemperature,36);
ASSERT.Equal(recipe4_recipeID,4);
ASSERT.Equal(recipe4_ingredientType,2);
ASSERT.Equal(recipe4_ingredientRatio,0.98);
ASSERT.Equal(recipe4_productionTemperature,36);
ASSERT.Equal(recipe5_recipeID,5);
ASSERT.Equal(recipe5_ingredientType,2);
ASSERT.Equal(recipe5_ingredientRatio,0.98);
ASSERT.Equal(recipe5_productionTemperature,36);
ASSERT.Equal(recipe6_recipeID,6);
ASSERT.Equal(recipe6_ingredientType,2);
ASSERT.Equal(recipe6_ingredientRatio,0.98);
ASSERT.Equal(recipe6_productionTemperature,36);
ASSERT.Equal(recipe7_recipeID,7);
ASSERT.Equal(recipe7_ingredientType,2);
ASSERT.Equal(recipe7_ingredientRatio,0.98);
ASSERT.Equal(recipe7_productionTemperature,36);
ASSERT.Equal(recipe8_recipeID,8);
ASSERT.Equal(recipe8_ingredientType,2);
ASSERT.Equal(recipe8_ingredientRatio,0.98);
ASSERT.Equal(recipe8_productionTemperature,36);
ASSERT.Equal(recipe9_recipeID,9);
ASSERT.Equal(recipe9_ingredientType,2);
ASSERT.Equal(recipe9_ingredientRatio,0.98);
ASSERT.Equal(recipe9_productionTemperature,36);
ASSERT.Equal(recipe10_recipeID,10);
ASSERT.Equal(recipe10_ingredientType,10);
ASSERT.Equal(recipe10_ingredientRatio,0.55);
ASSERT.Equal(recipe10_productionTemperature,55);

END_STEP


STEP: "Step 10"
addRecipe:=0;
deleteRecipe:=1;
modifyRecipe:=0;
queryRecipe:=0;
recipeIn_recipeID:=10;
recipeIn_ingredientType:=10;
recipeIn_ingredientRatio:=0.55;
recipeIn_productionTemperature:=55;

RUN(CYCLES:=1);
ASSERT.Equal(recipeAdded,0);
ASSERT.Equal(recipeDeleted,1);
ASSERT.Equal(recipeModified,0);
//ASSERT.Equal(recipeQueryResult_recipeID,0);
//ASSERT.Equal(recipeQueryResult_ingredientType,0);
//ASSERT.Equal(recipeQueryResult_ingredientRatio,0);
//ASSERT.Equal(recipeQueryResult_productionTemperature,0);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(recipe1_recipeID,1);
ASSERT.Equal(recipe1_ingredientType,2);
ASSERT.Equal(recipe1_ingredientRatio,0.98);
ASSERT.Equal(recipe1_productionTemperature,36);
ASSERT.Equal(recipe2_recipeID,2);
ASSERT.Equal(recipe2_ingredientType,2);
ASSERT.Equal(recipe2_ingredientRatio,0.98);
ASSERT.Equal(recipe2_productionTemperature,36);
ASSERT.Equal(recipe3_recipeID,3);
ASSERT.Equal(recipe3_ingredientType,2);
ASSERT.Equal(recipe3_ingredientRatio,0.98);
ASSERT.Equal(recipe3_productionTemperature,36);
ASSERT.Equal(recipe4_recipeID,4);
ASSERT.Equal(recipe4_ingredientType,2);
ASSERT.Equal(recipe4_ingredientRatio,0.98);
ASSERT.Equal(recipe4_productionTemperature,36);
ASSERT.Equal(recipe5_recipeID,5);
ASSERT.Equal(recipe5_ingredientType,2);
ASSERT.Equal(recipe5_ingredientRatio,0.98);
ASSERT.Equal(recipe5_productionTemperature,36);
ASSERT.Equal(recipe6_recipeID,6);
ASSERT.Equal(recipe6_ingredientType,2);
ASSERT.Equal(recipe6_ingredientRatio,0.98);
ASSERT.Equal(recipe6_productionTemperature,36);
ASSERT.Equal(recipe7_recipeID,7);
ASSERT.Equal(recipe7_ingredientType,2);
ASSERT.Equal(recipe7_ingredientRatio,0.98);
ASSERT.Equal(recipe7_productionTemperature,36);
ASSERT.Equal(recipe8_recipeID,8);
ASSERT.Equal(recipe8_ingredientType,2);
ASSERT.Equal(recipe8_ingredientRatio,0.98);
ASSERT.Equal(recipe8_productionTemperature,36);
ASSERT.Equal(recipe9_recipeID,9);
ASSERT.Equal(recipe9_ingredientType,2);
ASSERT.Equal(recipe9_ingredientRatio,0.98);
ASSERT.Equal(recipe9_productionTemperature,36);
ASSERT.Equal(recipe10_recipeID,0);
ASSERT.Equal(recipe10_ingredientType,10);
ASSERT.Equal(recipe10_ingredientRatio,0.55);
ASSERT.Equal(recipe10_productionTemperature,55);

END_STEP

STEP: "Step 11"
addRecipe:=0;
deleteRecipe:=1;
modifyRecipe:=0;
queryRecipe:=0;
recipeIn_recipeID:=5;
recipeIn_ingredientType:=10;
recipeIn_ingredientRatio:=0.55;
recipeIn_productionTemperature:=55;

RUN(CYCLES:=1);
ASSERT.Equal(recipeAdded,0);
ASSERT.Equal(recipeDeleted,1);
ASSERT.Equal(recipeModified,0);
//ASSERT.Equal(recipeQueryResult_recipeID,0);
//ASSERT.Equal(recipeQueryResult_ingredientType,0);
//ASSERT.Equal(recipeQueryResult_ingredientRatio,0);
//ASSERT.Equal(recipeQueryResult_productionTemperature,0);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(recipe1_recipeID,1);
ASSERT.Equal(recipe1_ingredientType,2);
ASSERT.Equal(recipe1_ingredientRatio,0.98);
ASSERT.Equal(recipe1_productionTemperature,36);
ASSERT.Equal(recipe2_recipeID,2);
ASSERT.Equal(recipe2_ingredientType,2);
ASSERT.Equal(recipe2_ingredientRatio,0.98);
ASSERT.Equal(recipe2_productionTemperature,36);
ASSERT.Equal(recipe3_recipeID,3);
ASSERT.Equal(recipe3_ingredientType,2);
ASSERT.Equal(recipe3_ingredientRatio,0.98);
ASSERT.Equal(recipe3_productionTemperature,36);
ASSERT.Equal(recipe4_recipeID,4);
ASSERT.Equal(recipe4_ingredientType,2);
ASSERT.Equal(recipe4_ingredientRatio,0.98);
ASSERT.Equal(recipe4_productionTemperature,36);
ASSERT.Equal(recipe5_recipeID,0);
ASSERT.Equal(recipe5_ingredientType,2);
ASSERT.Equal(recipe5_ingredientRatio,0.98);
ASSERT.Equal(recipe5_productionTemperature,36);
ASSERT.Equal(recipe6_recipeID,6);
ASSERT.Equal(recipe6_ingredientType,2);
ASSERT.Equal(recipe6_ingredientRatio,0.98);
ASSERT.Equal(recipe6_productionTemperature,36);
ASSERT.Equal(recipe7_recipeID,7);
ASSERT.Equal(recipe7_ingredientType,2);
ASSERT.Equal(recipe7_ingredientRatio,0.98);
ASSERT.Equal(recipe7_productionTemperature,36);
ASSERT.Equal(recipe8_recipeID,8);
ASSERT.Equal(recipe8_ingredientType,2);
ASSERT.Equal(recipe8_ingredientRatio,0.98);
ASSERT.Equal(recipe8_productionTemperature,36);
ASSERT.Equal(recipe9_recipeID,9);
ASSERT.Equal(recipe9_ingredientType,2);
ASSERT.Equal(recipe9_ingredientRatio,0.98);
ASSERT.Equal(recipe9_productionTemperature,36);
ASSERT.Equal(recipe10_recipeID,0);
ASSERT.Equal(recipe10_ingredientType,10);
ASSERT.Equal(recipe10_ingredientRatio,0.55);
ASSERT.Equal(recipe10_productionTemperature,55);

END_STEP

STEP: "Step 12"
addRecipe:=1;
deleteRecipe:=0;
modifyRecipe:=0;
queryRecipe:=0;
recipeIn_recipeID:=11;
recipeIn_ingredientType:=10;
recipeIn_ingredientRatio:=0.55;
recipeIn_productionTemperature:=55;

RUN(CYCLES:=1);
ASSERT.Equal(recipeAdded,1);
ASSERT.Equal(recipeDeleted,0);
ASSERT.Equal(recipeModified,0);
//ASSERT.Equal(recipeQueryResult_recipeID,0);
//ASSERT.Equal(recipeQueryResult_ingredientType,0);
//ASSERT.Equal(recipeQueryResult_ingredientRatio,0);
//ASSERT.Equal(recipeQueryResult_productionTemperature,0);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(recipe1_recipeID,1);
ASSERT.Equal(recipe1_ingredientType,2);
ASSERT.Equal(recipe1_ingredientRatio,0.98);
ASSERT.Equal(recipe1_productionTemperature,36);
ASSERT.Equal(recipe2_recipeID,2);
ASSERT.Equal(recipe2_ingredientType,2);
ASSERT.Equal(recipe2_ingredientRatio,0.98);
ASSERT.Equal(recipe2_productionTemperature,36);
ASSERT.Equal(recipe3_recipeID,3);
ASSERT.Equal(recipe3_ingredientType,2);
ASSERT.Equal(recipe3_ingredientRatio,0.98);
ASSERT.Equal(recipe3_productionTemperature,36);
ASSERT.Equal(recipe4_recipeID,4);
ASSERT.Equal(recipe4_ingredientType,2);
ASSERT.Equal(recipe4_ingredientRatio,0.98);
ASSERT.Equal(recipe4_productionTemperature,36);
ASSERT.Equal(recipe5_recipeID,11);
ASSERT.Equal(recipe5_ingredientType,10);
ASSERT.Equal(recipe5_ingredientRatio,0.55);
ASSERT.Equal(recipe5_productionTemperature,55);
ASSERT.Equal(recipe6_recipeID,6);
ASSERT.Equal(recipe6_ingredientType,2);
ASSERT.Equal(recipe6_ingredientRatio,0.98);
ASSERT.Equal(recipe6_productionTemperature,36);
ASSERT.Equal(recipe7_recipeID,7);
ASSERT.Equal(recipe7_ingredientType,2);
ASSERT.Equal(recipe7_ingredientRatio,0.98);
ASSERT.Equal(recipe7_productionTemperature,36);
ASSERT.Equal(recipe8_recipeID,8);
ASSERT.Equal(recipe8_ingredientType,2);
ASSERT.Equal(recipe8_ingredientRatio,0.98);
ASSERT.Equal(recipe8_productionTemperature,36);
ASSERT.Equal(recipe9_recipeID,9);
ASSERT.Equal(recipe9_ingredientType,2);
ASSERT.Equal(recipe9_ingredientRatio,0.98);
ASSERT.Equal(recipe9_productionTemperature,36);
ASSERT.Equal(recipe10_recipeID,0);
ASSERT.Equal(recipe10_ingredientType,10);
ASSERT.Equal(recipe10_ingredientRatio,0.55);
ASSERT.Equal(recipe10_productionTemperature,55);

END_STEP





























END_TEST_CASE

TEST_CASE "FB_SplitNumber"

PROPERTY
AUTHOR : ""
VERSION : "0.1"
COMMENT : ""
SCOPE : "PLC_3"
PLCSIM_INSTANCE_NAME : "FB_SplitNumber"
TEST_EXECUTION_MODE : "SystemManagedPlcSimAdvInstance"
END_PROPERTY

VAR
InputNumber:"FB_SplitNumber_DB".InputNumber;
Thousands:"FB_SplitNumber_DB".Thousands;
Hundreds:"FB_SplitNumber_DB".Hundreds;
Tens:"FB_SplitNumber_DB".Tens;
Ones:"FB_SplitNumber_DB".Ones;
Min:"FB_SplitNumber_DB".Min;
error:"FB_SplitNumber_DB".error;
status:"FB_SplitNumber_DB".status;
END_VAR

STEP: "Step 1"
InputNumber:=0;
RUN(CYCLES:=1);
ASSERT.Equal(Thousands,0);
ASSERT.Equal(Hundreds,0);
ASSERT.Equal(Tens,0);
ASSERT.Equal(Ones,0);
ASSERT.Equal(Min,0);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);
END_STEP

STEP: "Step 2"
InputNumber:=-1;
RUN(CYCLES:=1);
ASSERT.Equal(Thousands,0);
ASSERT.Equal(Hundreds,0);
ASSERT.Equal(Tens,0);
ASSERT.Equal(Ones,0);
ASSERT.Equal(Min,0);
ASSERT.Equal(error,1);
ASSERT.Equal(status,16#8001);
END_STEP

STEP: "Step 3"
InputNumber:=9999;
RUN(CYCLES:=1);
ASSERT.Equal(Thousands,9);
ASSERT.Equal(Hundreds,9);
ASSERT.Equal(Tens,9);
ASSERT.Equal(Ones,9);
ASSERT.Equal(Min,9);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);
END_STEP

STEP: "Step 4"
InputNumber:=120;
RUN(CYCLES:=1);
ASSERT.Equal(Thousands,0);
ASSERT.Equal(Hundreds,1);
ASSERT.Equal(Tens,2);
ASSERT.Equal(Ones,0);
ASSERT.Equal(Min,1);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);
END_STEP

STEP: "Step 5"
InputNumber:=10000;
RUN(CYCLES:=1);
ASSERT.Equal(Thousands,0);
ASSERT.Equal(Hundreds,0);
ASSERT.Equal(Tens,0);
ASSERT.Equal(Ones,0);
ASSERT.Equal(Min,0);
ASSERT.Equal(error,1);
ASSERT.Equal(status,16#8001);
END_STEP

STEP: "Step 6"
InputNumber:=1;
RUN(CYCLES:=1);
ASSERT.Equal(Thousands,0);
ASSERT.Equal(Hundreds,0);
ASSERT.Equal(Tens,0);
ASSERT.Equal(Ones,1);
ASSERT.Equal(Min,1);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);
END_STEP







END_TEST_CASE

TEST_CASE "FB_SplitWordIntoBytes"

PROPERTY
AUTHOR : ""
VERSION : "0.1"
COMMENT : ""
SCOPE : "PLC_3"
PLCSIM_INSTANCE_NAME : "FB_SplitWordIntoBytes"
TEST_EXECUTION_MODE : "SystemManagedPlcSimAdvInstance"
END_PROPERTY

VAR
InputWord:"FB_SplitWordIntoBytes_DB".InputWord;
Byte0:"FB_SplitWordIntoBytes_DB".Byte0;
Byte1:"FB_SplitWordIntoBytes_DB".Byte1;
Byte2:"FB_SplitWordIntoBytes_DB".Byte2;
Byte3:"FB_SplitWordIntoBytes_DB".Byte3;
average:"FB_SplitWordIntoBytes_DB".average;
END_VAR

STEP: "Step 1"
InputWord:=16#0;
RUN(CYCLES:=1);
ASSERT.Equal(Byte0,0);
ASSERT.Equal(Byte1,0);
ASSERT.Equal(Byte2,0);
ASSERT.Equal(Byte3,0);
ASSERT.Equal(average,0);
END_STEP

STEP: "Step 2"
InputWord:=16#0100;
RUN(CYCLES:=1);
ASSERT.Equal(Byte0,0);
ASSERT.Equal(Byte1,0);
ASSERT.Equal(Byte2,1);
ASSERT.Equal(Byte3,0);
ASSERT.Equal(average,1);
END_STEP

STEP: "Step 3"
InputWord:=16#FFFF;
RUN(CYCLES:=1);
ASSERT.Equal(Byte0,15);
ASSERT.Equal(Byte1,15);
ASSERT.Equal(Byte2,15);
ASSERT.Equal(Byte3,15);
ASSERT.Equal(average,15);
END_STEP

STEP: "Step 4"
InputWord:=16#ABCD;
RUN(CYCLES:=1);
ASSERT.Equal(Byte0,13);
ASSERT.Equal(Byte1,12);
ASSERT.Equal(Byte2,11);
ASSERT.Equal(Byte3,10);
ASSERT.Equal(average,11.5);
END_STEP

STEP: "Step 5"
InputWord:=16#0ABC;
RUN(CYCLES:=1);
ASSERT.Equal(Byte0,12);
ASSERT.Equal(Byte1,11);
ASSERT.Equal(Byte2,10);
ASSERT.Equal(Byte3,0);
ASSERT.Equal(average,11);
END_STEP

STEP: "Step 6"
InputWord:=16#A0C0;
RUN(CYCLES:=1);
ASSERT.Equal(Byte0,0);
ASSERT.Equal(Byte1,12);
ASSERT.Equal(Byte2,0);
ASSERT.Equal(Byte3,10);
ASSERT.Equal(average,11);
END_STEP



END_TEST_CASE

TEST_CASE "FB_WarehouseManagement"

PROPERTY
AUTHOR : ""
VERSION : "0.1"
COMMENT : ""
SCOPE : "PLC_3"
PLCSIM_INSTANCE_NAME : "FB_WarehouseManagement"
TEST_EXECUTION_MODE : "SystemManagedPlcSimAdvInstance"
END_PROPERTY

VAR
requestIn:"FB_WarehouseManagement_DBG".requestIn;
requestOut:"FB_WarehouseManagement_DBG".requestOut;
productNum:"FB_WarehouseManagement_DBG".productNum;
libFreeNum:"FB_WarehouseManagement_DBG".libFreeNum;
error:"FB_WarehouseManagement_DBG".error;
status:"FB_WarehouseManagement_DBG".status;

library1:"FB_WarehouseManagement_DBG".library[1];
library2:"FB_WarehouseManagement_DBG".library[2];
library3:"FB_WarehouseManagement_DBG".library[3];
library4:"FB_WarehouseManagement_DBG".library[4];
library5:"FB_WarehouseManagement_DBG".library[5];
library6:"FB_WarehouseManagement_DBG".library[6];
library7:"FB_WarehouseManagement_DBG".library[7];
library8:"FB_WarehouseManagement_DBG".library[8];
library9:"FB_WarehouseManagement_DBG".library[9];

END_VAR

STEP: "Step 1"
requestIn:=0;
requestOut:=1;
RUN(CYCLES:=1);
ASSERT.Equal(productNum,0);
ASSERT.Equal(libFreeNum,9);
ASSERT.Equal(error,1);
ASSERT.Equal(status,16#8002);

ASSERT.Equal(library1,0);
ASSERT.Equal(library2,0);
ASSERT.Equal(library3,0);
ASSERT.Equal(library4,0);
ASSERT.Equal(library5,0);
ASSERT.Equal(library6,0);
ASSERT.Equal(library7,0);
ASSERT.Equal(library8,0);
ASSERT.Equal(library9,0);

END_STEP

STEP: "Step 2"
requestIn:=1;
requestOut:=0;
RUN(CYCLES:=1);
ASSERT.Equal(productNum,1);
ASSERT.Equal(libFreeNum,8);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(library1,0);
ASSERT.Equal(library2,0);
ASSERT.Equal(library3,0);
ASSERT.Equal(library4,0);
ASSERT.Equal(library5,0);
ASSERT.Equal(library6,0);
ASSERT.Equal(library7,0);
ASSERT.Equal(library8,0);
ASSERT.Equal(library9,1);

END_STEP

STEP: "Step 3"


library1:=0;
library2:=0;
library3:=1;
library4:=0;
library5:=0;
library6:=1;
library7:=0;
library8:=1;
library9:=1;

requestIn:=1;
requestOut:=0;

RUN(CYCLES:=1);
ASSERT.Equal(productNum,5);
ASSERT.Equal(libFreeNum,4);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(library1,0);
ASSERT.Equal(library2,0);
ASSERT.Equal(library3,1);
ASSERT.Equal(library4,0);
ASSERT.Equal(library5,0);
ASSERT.Equal(library6,1);
ASSERT.Equal(library7,1);
ASSERT.Equal(library8,1);
ASSERT.Equal(library9,1);

END_STEP

STEP: "Step 4"
requestIn:=0;
requestOut:=1;

RUN(CYCLES:=1);
ASSERT.Equal(productNum,4);
ASSERT.Equal(libFreeNum,5);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(library1,0);
ASSERT.Equal(library2,0);
ASSERT.Equal(library3,0);
ASSERT.Equal(library4,0);
ASSERT.Equal(library5,0);
ASSERT.Equal(library6,1);
ASSERT.Equal(library7,1);
ASSERT.Equal(library8,1);
ASSERT.Equal(library9,1);

END_STEP

STEP: "Step 5"
requestIn:=1;
requestOut:=0;

library1:=1;
library2:=1;
library3:=1;
library4:=1;
library5:=1;
library6:=1;
library7:=1;
library8:=1;
library9:=1;

RUN(CYCLES:=1);
ASSERT.Equal(productNum,9);
ASSERT.Equal(libFreeNum,0);
ASSERT.Equal(error,1);
ASSERT.Equal(status,16#8001);

ASSERT.Equal(library1,1);
ASSERT.Equal(library2,1);
ASSERT.Equal(library3,1);
ASSERT.Equal(library4,1);
ASSERT.Equal(library5,1);
ASSERT.Equal(library6,1);
ASSERT.Equal(library7,1);
ASSERT.Equal(library8,1);
ASSERT.Equal(library9,1);

END_STEP




END_TEST_CASE

