TEST_CASE "FB_DatabaseManager"

PROPERTY
AUTHOR : ""
VERSION : "0.1"
COMMENT : ""
SCOPE : "PLC_3"
PLCSIM_INSTANCE_NAME : "FB_DatabaseManager"
TEST_EXECUTION_MODE : "SystemManagedPlcSimAdvInstance"
END_PROPERTY

VAR
dataInput0:"FB_DatabaseManager_DBG".dataInput[0];
dataInput1:"FB_DatabaseManager_DBG".dataInput[1];
dataInput2:"FB_DatabaseManager_DBG".dataInput[2];
dataInput3:"FB_DatabaseManager_DBG".dataInput[3];
dataInput4:"FB_DatabaseManager_DBG".dataInput[4];
dataInput5:"FB_DatabaseManager_DBG".dataInput[5];
storeTrigger:"FB_DatabaseManager_DBG".storeTrigger;
resetTrigger:"FB_DatabaseManager_DBG".resetTrigger;
usedSpace:"FB_DatabaseManager_DBG".usedSpace;
remainingSpace:"FB_DatabaseManager_DBG".remainingSpace;
error:"FB_DatabaseManager_DBG".error;
status:"FB_DatabaseManager_DBG".status;

database1:"FB_DatabaseManager_DBG".database[1];
database2:"FB_DatabaseManager_DBG".database[2];
database3:"FB_DatabaseManager_DBG".database[3];
database4:"FB_DatabaseManager_DBG".database[4];
database5:"FB_DatabaseManager_DBG".database[5];
database6:"FB_DatabaseManager_DBG".database[6];
database7:"FB_DatabaseManager_DBG".database[7];
database8:"FB_DatabaseManager_DBG".database[8];
database9:"FB_DatabaseManager_DBG".database[9];
database10:"FB_DatabaseManager_DBG".database[10];
database11:"FB_DatabaseManager_DBG".database[11];
database12:"FB_DatabaseManager_DBG".database[12];
database13:"FB_DatabaseManager_DBG".database[13];
database14:"FB_DatabaseManager_DBG".database[14];
database15:"FB_DatabaseManager_DBG".database[15];
database16:"FB_DatabaseManager_DBG".database[16];
database17:"FB_DatabaseManager_DBG".database[17];
database18:"FB_DatabaseManager_DBG".database[18];
database19:"FB_DatabaseManager_DBG".database[19];
database20:"FB_DatabaseManager_DBG".database[20];

END_VAR

STEP: "Step 1"
dataInput0:=0;
dataInput1:=0;
dataInput2:=0;
dataInput3:=0;
dataInput4:=0;
dataInput5:=0;

storeTrigger:=1;


RUN(CYCLES:=1);
ASSERT.Equal(usedSpace,0);
ASSERT.Equal(remainingSpace,20);
ASSERT.Equal(error,TRUE);
ASSERT.Equal(status,16#8001);

ASSERT.Equal(database1,0);
ASSERT.Equal(database2,0);
ASSERT.Equal(database3,0);
ASSERT.Equal(database4,0);
ASSERT.Equal(database5,0);
ASSERT.Equal(database6,0);
ASSERT.Equal(database7,0);
ASSERT.Equal(database8,0);
ASSERT.Equal(database9,0);
ASSERT.Equal(database10,0);
ASSERT.Equal(database11,0);
ASSERT.Equal(database12,0);
ASSERT.Equal(database13,0);
ASSERT.Equal(database14,0);
ASSERT.Equal(database15,0);
ASSERT.Equal(database16,0);
ASSERT.Equal(database17,0);
ASSERT.Equal(database18,0);
ASSERT.Equal(database19,0);
ASSERT.Equal(database20,0);
END_STEP

STEP: "Step 2"
dataInput0:=6;
dataInput1:=1;
dataInput2:=0;
dataInput3:=1;
dataInput4:=0;
dataInput5:=1;

storeTrigger:=1;


RUN(CYCLES:=1);
ASSERT.Equal(usedSpace,0);
ASSERT.Equal(remainingSpace,20);
ASSERT.Equal(error,TRUE);
ASSERT.Equal(status,16#8001);

ASSERT.Equal(database1,0);
ASSERT.Equal(database2,0);
ASSERT.Equal(database3,0);
ASSERT.Equal(database4,0);
ASSERT.Equal(database5,0);
ASSERT.Equal(database6,0);
ASSERT.Equal(database7,0);
ASSERT.Equal(database8,0);
ASSERT.Equal(database9,0);
ASSERT.Equal(database10,0);
ASSERT.Equal(database11,0);
ASSERT.Equal(database12,0);
ASSERT.Equal(database13,0);
ASSERT.Equal(database14,0);
ASSERT.Equal(database15,0);
ASSERT.Equal(database16,0);
ASSERT.Equal(database17,0);
ASSERT.Equal(database18,0);
ASSERT.Equal(database19,0);
ASSERT.Equal(database20,0);
END_STEP

STEP: "Step 3"
dataInput0:=1;
dataInput1:=1;
dataInput2:=0;
dataInput3:=0;
dataInput4:=0;
dataInput5:=0;

storeTrigger:=0;
//storeTrigger:=1;

RUN(CYCLES:=1);
ASSERT.Equal(usedSpace,0);
ASSERT.Equal(remainingSpace,20);
//ASSERT.Equal(usedSpace,1);
//ASSERT.Equal(remainingSpace,19);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(database1,0);
//ASSERT.Equal(database1,1);
ASSERT.Equal(database2,0);
ASSERT.Equal(database3,0);
ASSERT.Equal(database4,0);
ASSERT.Equal(database5,0);
ASSERT.Equal(database6,0);
ASSERT.Equal(database7,0);
ASSERT.Equal(database8,0);
ASSERT.Equal(database9,0);
ASSERT.Equal(database10,0);
ASSERT.Equal(database11,0);
ASSERT.Equal(database12,0);
ASSERT.Equal(database13,0);
ASSERT.Equal(database14,0);
ASSERT.Equal(database15,0);
ASSERT.Equal(database16,0);
ASSERT.Equal(database17,0);
ASSERT.Equal(database18,0);
ASSERT.Equal(database19,0);
ASSERT.Equal(database20,0);
END_STEP


STEP: "Step 4"
dataInput0:=1;
dataInput1:=1;
dataInput2:=0;
dataInput3:=0;
dataInput4:=0;
dataInput5:=0;

storeTrigger:=1;

RUN(CYCLES:=1);
ASSERT.Equal(usedSpace,1);
ASSERT.Equal(remainingSpace,19);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);
ASSERT.Equal(database1,1);
ASSERT.Equal(database2,0);
ASSERT.Equal(database3,0);
ASSERT.Equal(database4,0);
ASSERT.Equal(database5,0);
ASSERT.Equal(database6,0);
ASSERT.Equal(database7,0);
ASSERT.Equal(database8,0);
ASSERT.Equal(database9,0);
ASSERT.Equal(database10,0);
ASSERT.Equal(database11,0);
ASSERT.Equal(database12,0);
ASSERT.Equal(database13,0);
ASSERT.Equal(database14,0);
ASSERT.Equal(database15,0);
ASSERT.Equal(database16,0);
ASSERT.Equal(database17,0);
ASSERT.Equal(database18,0);
ASSERT.Equal(database19,0);
ASSERT.Equal(database20,0);
END_STEP


STEP: "Step 5"
dataInput0:=4;
dataInput1:=1;
dataInput2:=0;
dataInput3:=0;
dataInput4:=1;
dataInput5:=1;

storeTrigger:=1;


RUN(CYCLES:=1);
ASSERT.Equal(usedSpace,5);
ASSERT.Equal(remainingSpace,15);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(database1,1);
ASSERT.Equal(database2,1);
ASSERT.Equal(database3,0);
ASSERT.Equal(database4,0);
ASSERT.Equal(database5,1);
ASSERT.Equal(database6,0);
ASSERT.Equal(database7,0);
ASSERT.Equal(database8,0);
ASSERT.Equal(database9,0);
ASSERT.Equal(database10,0);
ASSERT.Equal(database11,0);
ASSERT.Equal(database12,0);
ASSERT.Equal(database13,0);
ASSERT.Equal(database14,0);
ASSERT.Equal(database15,0);
ASSERT.Equal(database16,0);
ASSERT.Equal(database17,0);
ASSERT.Equal(database18,0);
ASSERT.Equal(database19,0);
ASSERT.Equal(database20,0);
END_STEP

STEP: "Step 6"
dataInput0:=5;
dataInput1:=1;
dataInput2:=0;
dataInput3:=0;
dataInput4:=1;
dataInput5:=0;

storeTrigger:=1;


RUN(CYCLES:=1);
ASSERT.Equal(usedSpace,10);
ASSERT.Equal(remainingSpace,10);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(database1,1);
ASSERT.Equal(database2,1);
ASSERT.Equal(database3,0);
ASSERT.Equal(database4,0);
ASSERT.Equal(database5,1);
ASSERT.Equal(database6,1);
ASSERT.Equal(database7,0);
ASSERT.Equal(database8,0);
ASSERT.Equal(database9,1);
ASSERT.Equal(database10,0);
ASSERT.Equal(database11,0);
ASSERT.Equal(database12,0);
ASSERT.Equal(database13,0);
ASSERT.Equal(database14,0);
ASSERT.Equal(database15,0);
ASSERT.Equal(database16,0);
ASSERT.Equal(database17,0);
ASSERT.Equal(database18,0);
ASSERT.Equal(database19,0);
ASSERT.Equal(database20,0);
END_STEP

STEP: "Step 7"
dataInput0:=5;
dataInput1:=0;
dataInput2:=0;
dataInput3:=0;
dataInput4:=1;
dataInput5:=1;

storeTrigger:=1;


RUN(CYCLES:=1);
ASSERT.Equal(usedSpace,15);
ASSERT.Equal(remainingSpace,5);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(database1,1);
ASSERT.Equal(database2,1);
ASSERT.Equal(database3,0);
ASSERT.Equal(database4,0);
ASSERT.Equal(database5,1);
ASSERT.Equal(database6,1);
ASSERT.Equal(database7,0);
ASSERT.Equal(database8,0);
ASSERT.Equal(database9,1);
ASSERT.Equal(database10,0);
ASSERT.Equal(database11,0);
ASSERT.Equal(database12,0);
ASSERT.Equal(database13,0);
ASSERT.Equal(database14,1);
ASSERT.Equal(database15,1);
ASSERT.Equal(database16,0);
ASSERT.Equal(database17,0);
ASSERT.Equal(database18,0);
ASSERT.Equal(database19,0);
ASSERT.Equal(database20,0);
END_STEP

STEP: "Step 8"
dataInput0:=5;
dataInput1:=0;
dataInput2:=0;
dataInput3:=0;
dataInput4:=0;
dataInput5:=0;

storeTrigger:=1;


RUN(CYCLES:=1);
ASSERT.Equal(usedSpace,20);
ASSERT.Equal(remainingSpace,0);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(database1,1);
ASSERT.Equal(database2,1);
ASSERT.Equal(database3,0);
ASSERT.Equal(database4,0);
ASSERT.Equal(database5,1);
ASSERT.Equal(database6,1);
ASSERT.Equal(database7,0);
ASSERT.Equal(database8,0);
ASSERT.Equal(database9,1);
ASSERT.Equal(database10,0);
ASSERT.Equal(database11,0);
ASSERT.Equal(database12,0);
ASSERT.Equal(database13,0);
ASSERT.Equal(database14,1);
ASSERT.Equal(database15,1);
ASSERT.Equal(database16,0);
ASSERT.Equal(database17,0);
ASSERT.Equal(database18,0);
ASSERT.Equal(database19,0);
ASSERT.Equal(database20,0);
END_STEP

STEP: "Step 9"
dataInput0:=1;
dataInput1:=0;
dataInput2:=0;
dataInput3:=0;
dataInput4:=0;
dataInput5:=0;

storeTrigger:=1;

RUN(CYCLES:=1);
ASSERT.Equal(usedSpace,20);
ASSERT.Equal(remainingSpace,0);
ASSERT.Equal(error,TRUE);
ASSERT.Equal(status,16#8002);

ASSERT.Equal(database1,1);
ASSERT.Equal(database2,1);
ASSERT.Equal(database3,0);
ASSERT.Equal(database4,0);
ASSERT.Equal(database5,1);
ASSERT.Equal(database6,1);
ASSERT.Equal(database7,0);
ASSERT.Equal(database8,0);
ASSERT.Equal(database9,1);
ASSERT.Equal(database10,0);
ASSERT.Equal(database11,0);
ASSERT.Equal(database12,0);
ASSERT.Equal(database13,0);
ASSERT.Equal(database14,1);
ASSERT.Equal(database15,1);
ASSERT.Equal(database16,0);
ASSERT.Equal(database17,0);
ASSERT.Equal(database18,0);
ASSERT.Equal(database19,0);
ASSERT.Equal(database20,0);
END_STEP

STEP: "Step 10"

resetTrigger:=1;

RUN(CYCLES:=1);
ASSERT.Equal(usedSpace,0);
ASSERT.Equal(remainingSpace,20);
ASSERT.Equal(error,0);
ASSERT.Equal(status,0);

ASSERT.Equal(database1,0);
ASSERT.Equal(database2,0);
ASSERT.Equal(database3,0);
ASSERT.Equal(database4,0);
ASSERT.Equal(database5,0);
ASSERT.Equal(database6,0);
ASSERT.Equal(database7,0);
ASSERT.Equal(database8,0);
ASSERT.Equal(database9,0);
ASSERT.Equal(database10,0);
ASSERT.Equal(database11,0);
ASSERT.Equal(database12,0);
ASSERT.Equal(database13,0);
ASSERT.Equal(database14,0);
ASSERT.Equal(database15,0);
ASSERT.Equal(database16,0);
ASSERT.Equal(database17,0);
ASSERT.Equal(database18,0);
ASSERT.Equal(database19,0);
ASSERT.Equal(database20,0);
END_STEP

END_TEST_CASE

